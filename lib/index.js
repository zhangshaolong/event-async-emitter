const slice=Array.prototype.slice,EventAsyncEmitter=function(){this.tasks={},this.fired={}};EventAsyncEmitter.tasks={},EventAsyncEmitter.fired={},EventAsyncEmitter.on=EventAsyncEmitter.prototype.on=function(key,task){if(!key||!task)return!1;let queue=this.tasks[key];if(!queue||!queue.length){queue=this.tasks[key]=[];let args=this.fired[key];args&&task.apply(null,args)}return queue.push(task),function(){for(let i=0;i<queue.length;i++)queue[i]===task&&queue.splice(i--,1)}},EventAsyncEmitter.fire=EventAsyncEmitter.prototype.fire=function(key){let tasks=this.tasks,args=slice.call(arguments,1);if(!key)return!1;this.fired[key]=args;let queue=tasks[key];if(!queue)return!1;if(0===queue.length)return!1;for(let i=0;i<queue.length;i++)queue[i].apply(null,args)},EventAsyncEmitter.un=EventAsyncEmitter.prototype.un=function(key,task){if(!key)return this.tasks={},!0;let queue=this.tasks[key];if(!queue)return!1;if(!task)return queue.length=0,!0;let has=!1;for(let i=0;i<queue.length;i++)queue[i]===task&&(queue.splice(i--,1),has=!0);return has},EventAsyncEmitter.once=EventAsyncEmitter.prototype.once=function(key,task){let me=this,handler=function(){task.apply(null,arguments),me.un(key,handler)};this.on(key,handler)},EventAsyncEmitter.init=function(){return new EventAsyncEmitter};export default EventAsyncEmitter;